load_file("DG.hoc")

//simuation constants
SIMRUNTIME = 500
DELAY = 100
I_INJ = 0.5

tstop = SIMRUNTIME
v_init = -84

objectvar membrane_voltage, time
membrane_voltage = new Vector()
time = new Vector()

objectvar cell
cell = new Cell_A()

//record the cells membrane voltage.
membrane_voltage.record(&cell.soma.v(0.5))
time.record(&t)

//First graph the membrane potential vs time plot.

//Create a current clamp.
objectvar i_inj
cell.soma i_inj = new IClamp(0.5)
i_inj.del = DELAY
i_inj.dur = SIMRUNTIME - DELAY
i_inj.amp = I_INJ

//run the simulation and plot the outcome
run()

//Membrane voltage vs. time
objectvar g_mvt
g_mvt = new Graph()
g_mvt.size(0,SIMRUNTIME, 30, -90)
g_mvt.vector(membrane_voltage.size(), &time.x[0], &membrane_voltage.x[0])
g_mvt.flush()


//Now lets create the FI curve.

objectvar target, reported
target = new Vector(10)
reported = new Vector(10)
target.x[0] = 0
target.x[1] = 52
target.x[2] = 92
target.x[3] = 120
target.x[4] = 142
target.x[5] = 161
target.x[6] = 177
target.x[7] = 191
target.x[8] = 203
target.x[9] = 214


objref nc, nil, spvec
func runSim(){


    cell.soma nc = new NetCon(&v(0.5),nil)
    spvec = new Vector()
    nc.record(spvec)

    i_inj.amp=$1

    run()

    return (spvec.size() / (SIMRUNTIME - DELAY)) * 1000
}


index = 0
for(amp = 0; amp < 1.0; amp += 0.1) {
    reported.x[index] = runSim(amp)
    index+=1
}

objref g_fi
g_fi = new Graph()
graphList[0].append(g_fi)
g_fi.size(0,1.0,0,250)


g_fi.begin()

reported.plot(g_fi,0.1)

g_fi.color(10)
target.plot(g_fi, 0.1)


g_fi.flush()